/**
 * @file IR_8bit.v
 * @Requirements R001 - Fetch and store instruction from data bus
 * @Requirements R002 - Asynchronous reset 
 * @Task Implement an instruction register inside the 8-bit CPU
*/

/**
 * @module IR_8bit 
 * @desc Instruction register
*/

module IR_8bit (
  input        clk,
  input        rst_n,
  input [1:0]  fetch,
  input [7:0]  data,

  /*@requires
    \valid(clk);
    \valid(rst_n);
    \valid(fetch);
    \valid(data);
  */

  /*@ensures
    rst_n == 1 && fetch == 2'b01 -> ins == data[7:4]; 
    rst_n == 1 && fetch == 2'b10 -> addr_mem == data;
    rst_n == 0 -> ins == 4'b0 && addr_mem == 8'b0;
  */  

  output [3:0] ins,
  output [3:0] addr_reg,
  output [7:0] addr_mem
);

  //Implementation code
  reg [7:0] ins_p1,ins_p2;

  assign ins = ins_p1[7:4];//fetch the op code
  assign addr_reg = ins_p1[3:0];
  assign addr_mem = ins_p2;

  always @(posedge clk) begin     
      if(!rst_n)begin
          ins_p1 <= 8'h00;
          ins_p2 <= 8'h00;
      end
      else begin
          if(fetch == 2'b01)begin
              ins_p1 <= data;
              ins_p2 <= ins_p2;
          end
          else if(fetch == 2'b10)begin
              ins_p1 <= ins_p1;
              ins_p2 <= data;
          end
          else begin
              ins_p1 <= ins_p1;
              ins_p2 <= ins_p2;
          end
      end
  end
endmodule