`timescale 1ns / 1ps

/**
 * @file CORE_8bit.v 
 * @Requirements R001 - Implement main datapath and control logic of CPU
 * @Requirements R002 - 8-bit data bus, 16 8-bit general purpose registers
 * @Task Design the core CPU with controller, datapath and peripherals
*/

/**
 * @module CORE_8bit
 * @desc CPU Core 
*/
module CORE_8bit(
    input clk,
    input rst_n,

    /* @requires
        \always(\valid(clk)) 
    */

    /* @ensures
        rst_n == 0 -> (DB == 0 && AB == 0);

        CTRL.ROM_en == 1  -> \eventually(DB == ROM[AB]);

        CTRL.RAM_write == 1 -> \eventually(RAM[AB] == DB);

        CTRL.RAM_read == 1 -> \eventually(DB == RAM[AB]);

        \box(ALU.alu_out == f(REG.reg_out, ACC.acc_out));
    */
    output [7:0]DB,
    output [7:0]AB,
    output ROM_en,
    output ROM_read,
    output RAM_en,
    output RAM_read,
    output RAM_write
    );
    //Declare the signal line
    wire [1:0] fetch;
    wire [3:0] ins;
    wire [3:0] REG_addr;
    wire [7:0] IR_addr,PC_addr;
    wire [7:0] acc_out,alu_out;
    wire REG_write,REG_read,PC_en,PC_chg_en,ACC_en,ADDR_sel;
    // reg rst_n = 1'b1;

    //submodule instantiation
    CTRL_8bit CTRL_0 (
        .clk (clk),
        .rst_n (rst_n),
        .ins (ins),
        .REG_write (REG_write),
        .REG_read (REG_read),
        .ROM_en (ROM_en),
        .ROM_read (ROM_read),
        .RAM_en (RAM_en),
        .RAM_write (RAM_write),
        .RAM_read (RAM_read),
        .PC_en (PC_en),
        .PC_chg_en(PC_chg_en),
        .ACC_en (ACC_en),
        .fetch (fetch),
        .ADDR_sel (ADDR_sel)
    );

    PC_8bit PC_0 (
        .clk (clk),
        .rst_n (rst_n),
        .en (PC_en),
        .chg_en(PC_chg_en),
        .chg_addr(DB),
        .PC_addr(PC_addr)
    );

    ACC_8bit ACC_0 (
        .clk (clk),
        .rst_n (rst_n),
        .en (ACC_en),
        .acc_in (alu_out),
        .acc_out (acc_out)
    );

    REG_8bit REG_0 (
        .clk (clk),
        .write (REG_write),
        .read (REG_read),
        .addr ({ins,REG_addr}),
        .reg_in (alu_out),
        .reg_out (DB)
    );

    ALU_8bit ALU_0 (
        .ins (ins),
        .alu_in (DB),
        .accum (acc_out),
        .alu_out (alu_out)
    );

    IR_8bit IR_0 (
        .clk (clk),
        .rst_n (rst_n),
        .fetch (fetch),
        .data (DB),
        .ins (ins),
        .addr_reg (REG_addr),
        .addr_mem(IR_addr)
    );

    ADDR_MUX_8bit ADDR_MUX_0 (
        .IR_addr (IR_addr),
        .PC_addr (PC_addr),
        .sel (ADDR_sel),
        .addr (AB)
    );

endmodule
